name: Deploy RBAC API

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/rbac-api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Staging with Docker Compose
      run: |
        echo "Deploying to staging environment with Docker..."
        # Create environment file for staging
        cat > .env << EOF
        DB_HOST=${{ secrets.DB_HOST }}
        DB_NAME=${{ secrets.DB_NAME }}
        DB_USERNAME=${{ secrets.DB_USERNAME }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_PORT=${{ secrets.DB_PORT }}
        JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
        DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/rbac-api:develop
        EOF
        
        # Deploy using docker-compose
        docker-compose -f docker-compose.prod.yml pull
        docker-compose -f docker-compose.prod.yml up -d
        
        # Wait for health check
        echo "Waiting for application to be healthy..."
        timeout 300 bash -c 'until curl -f http://localhost/health; do sleep 5; done'
        echo "Deployment completed successfully!"

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Production with Docker Compose
      run: |
        echo "Deploying to production environment with Docker..."
        # Create environment file for production
        cat > .env << EOF
        DB_HOST=${{ secrets.PROD_DB_HOST }}
        DB_NAME=${{ secrets.PROD_DB_NAME }}
        DB_USERNAME=${{ secrets.PROD_DB_USERNAME }}
        DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
        DB_PORT=${{ secrets.PROD_DB_PORT }}
        JWT_SECRET_KEY=${{ secrets.PROD_JWT_SECRET_KEY }}
        DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/rbac-api:latest
        EOF
        
        # Deploy using docker-compose
        docker-compose -f docker-compose.prod.yml pull
        docker-compose -f docker-compose.prod.yml up -d
        
        # Wait for health check
        echo "Waiting for application to be healthy..."
        timeout 300 bash -c 'until curl -f http://localhost/health; do sleep 5; done'
        echo "Production deployment completed successfully!"